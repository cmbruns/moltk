// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.h"
#include "biosequence.pypp.hpp"

namespace bp = boost::python;

struct Biosequence_wrapper : moltk::Biosequence, bp::wrapper< moltk::Biosequence > {

    struct Residue_wrapper : moltk::Biosequence::Residue, bp::wrapper< moltk::Biosequence::Residue > {
    
        Residue_wrapper(char oneLetterCodeParam, int residueNumberParam )
        : moltk::Biosequence::Residue( oneLetterCodeParam, residueNumberParam )
          , bp::wrapper< moltk::Biosequence::Residue >(){
            // constructor
        
        }
    
        Residue_wrapper(::moltk::Biosequence::Residue const & rhs )
        : moltk::Biosequence::Residue( boost::ref(rhs) )
          , bp::wrapper< moltk::Biosequence::Residue >(){
            // copy constructor
        
        }
    
        virtual char getOneLetterCode(  ) const  {
            if( bp::override func_getOneLetterCode = this->get_override( "getOneLetterCode" ) )
                return func_getOneLetterCode(  );
            else{
                return this->moltk::Biosequence::Residue::getOneLetterCode(  );
            }
        }
        
        char default_getOneLetterCode(  ) const  {
            return moltk::Biosequence::Residue::getOneLetterCode( );
        }
    
        virtual int getResidueNumber(  ) const  {
            if( bp::override func_getResidueNumber = this->get_override( "getResidueNumber" ) )
                return func_getResidueNumber(  );
            else{
                return this->moltk::Biosequence::Residue::getResidueNumber(  );
            }
        }
        
        int default_getResidueNumber(  ) const  {
            return moltk::Biosequence::Residue::getResidueNumber( );
        }
    
    };

    Biosequence_wrapper( )
    : moltk::Biosequence( )
      , bp::wrapper< moltk::Biosequence >(){
        // null constructor
    
    }

    Biosequence_wrapper(::std::string const & str )
    : moltk::Biosequence( str )
      , bp::wrapper< moltk::Biosequence >(){
        // constructor
    
    }

    Biosequence_wrapper(char const * str )
    : moltk::Biosequence( str )
      , bp::wrapper< moltk::Biosequence >(){
        // constructor
    
    }

    Biosequence_wrapper(::moltk::Biosequence const & rhs )
    : moltk::Biosequence( boost::ref(rhs) )
      , bp::wrapper< moltk::Biosequence >(){
        // copy constructor
    
    }

    virtual ::size_t getNumberOfResidues(  ) const  {
        if( bp::override func_getNumberOfResidues = this->get_override( "getNumberOfResidues" ) )
            return func_getNumberOfResidues(  );
        else{
            return this->moltk::Biosequence::getNumberOfResidues(  );
        }
    }
    
    ::size_t default_getNumberOfResidues(  ) const  {
        return moltk::Biosequence::getNumberOfResidues( );
    }

    virtual void print_to_stream( ::std::ostream & os ) const  {
        if( bp::override func_print_to_stream = this->get_override( "print_to_stream" ) )
            func_print_to_stream( boost::ref(os) );
        else{
            this->moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
        }
    }
    
    void default_print_to_stream( ::std::ostream & os ) const  {
        moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
    }

};

void register_Biosequence_class(){

    { //::moltk::Biosequence
        typedef bp::class_< Biosequence_wrapper, bp::bases< moltk::BaseBiosequence > > Biosequence_exposer_t;
        Biosequence_exposer_t Biosequence_exposer = Biosequence_exposer_t( "Biosequence", bp::init< >() );
        bp::scope Biosequence_scope( Biosequence_exposer );
        bp::class_< Biosequence_wrapper::Residue_wrapper, bp::bases< moltk::BaseBiosequence::BaseResidue > >( "Residue", bp::init< char, int >(( bp::arg("oneLetterCodeParam"), bp::arg("residueNumberParam") )) )    
            .def( bp::init< moltk::Biosequence::Residue const & >(( bp::arg("rhs") )) )    
            .def( 
                "getOneLetterCode"
                , (char ( ::moltk::Biosequence::Residue::* )(  ) const)(&::moltk::Biosequence::Residue::getOneLetterCode)
                , (char ( Biosequence_wrapper::Residue_wrapper::* )(  ) const)(&Biosequence_wrapper::Residue_wrapper::default_getOneLetterCode) )    
            .def( 
                "getResidueNumber"
                , (int ( ::moltk::Biosequence::Residue::* )(  ) const)(&::moltk::Biosequence::Residue::getResidueNumber)
                , (int ( Biosequence_wrapper::Residue_wrapper::* )(  ) const)(&Biosequence_wrapper::Residue_wrapper::default_getResidueNumber) );
        Biosequence_exposer.def( bp::init< std::string const & >(( bp::arg("str") )) );
        bp::implicitly_convertible< std::string const &, moltk::Biosequence >();
        Biosequence_exposer.def( bp::init< char const * >(( bp::arg("str") )) );
        bp::implicitly_convertible< char const *, moltk::Biosequence >();
        Biosequence_exposer.def( bp::init< moltk::Biosequence const & >(( bp::arg("rhs") )) );
        { //::moltk::Biosequence::begin
        
            typedef ::std::_Vector_iterator< moltk::Biosequence::Residue, std::allocator< moltk::Biosequence::Residue > > ( ::moltk::Biosequence::*begin_function_type )(  ) ;
            
            Biosequence_exposer.def( 
                "begin"
                , begin_function_type( &::moltk::Biosequence::begin ) );
        
        }
        { //::moltk::Biosequence::begin
        
            typedef ::std::_Vector_const_iterator< moltk::Biosequence::Residue, std::allocator< moltk::Biosequence::Residue > > ( ::moltk::Biosequence::*begin_function_type )(  ) const;
            
            Biosequence_exposer.def( 
                "begin"
                , begin_function_type( &::moltk::Biosequence::begin ) );
        
        }
        { //::moltk::Biosequence::end
        
            typedef ::std::_Vector_iterator< moltk::Biosequence::Residue, std::allocator< moltk::Biosequence::Residue > > ( ::moltk::Biosequence::*end_function_type )(  ) ;
            
            Biosequence_exposer.def( 
                "end"
                , end_function_type( &::moltk::Biosequence::end ) );
        
        }
        { //::moltk::Biosequence::end
        
            typedef ::std::_Vector_const_iterator< moltk::Biosequence::Residue, std::allocator< moltk::Biosequence::Residue > > ( ::moltk::Biosequence::*end_function_type )(  ) const;
            
            Biosequence_exposer.def( 
                "end"
                , end_function_type( &::moltk::Biosequence::end ) );
        
        }
        { //::moltk::Biosequence::getNumberOfResidues
        
            typedef ::size_t ( ::moltk::Biosequence::*getNumberOfResidues_function_type )(  ) const;
            typedef ::size_t ( Biosequence_wrapper::*default_getNumberOfResidues_function_type )(  ) const;
            
            Biosequence_exposer.def( 
                "getNumberOfResidues"
                , getNumberOfResidues_function_type(&::moltk::Biosequence::getNumberOfResidues)
                , default_getNumberOfResidues_function_type(&Biosequence_wrapper::default_getNumberOfResidues) );
        
        }
        { //::moltk::Biosequence::getResidue
        
            typedef ::moltk::BaseBiosequence::BaseResidue const & ( ::moltk::Biosequence::*getResidue_function_type )( ::size_t ) const;
            
            Biosequence_exposer.def( 
                "getResidue"
                , getResidue_function_type(&::moltk::Biosequence::getResidue)
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::Biosequence::operator[]
        
            typedef ::moltk::Biosequence::Residue const & ( ::moltk::Biosequence::*__getitem___function_type )( int ) const;
            
            Biosequence_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::moltk::Biosequence::operator[] )
                , ( bp::arg("ix") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::Biosequence::operator[]
        
            typedef ::moltk::Biosequence::Residue & ( ::moltk::Biosequence::*__getitem___function_type )( int ) ;
            
            Biosequence_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::moltk::Biosequence::operator[] )
                , ( bp::arg("ix") )
                , bp::return_internal_reference< >() );
        
        }
        { //::moltk::Biosequence::size
        
            typedef ::size_t ( ::moltk::Biosequence::*size_function_type )(  ) const;
            
            Biosequence_exposer.def( 
                "size"
                , size_function_type( &::moltk::Biosequence::size ) );
        
        }
        { //::moltk::BaseBiosequence::print_to_stream
        
            typedef void ( ::moltk::BaseBiosequence::*print_to_stream_function_type )( ::std::ostream & ) const;
            typedef void ( Biosequence_wrapper::*default_print_to_stream_function_type )( ::std::ostream & ) const;
            
            Biosequence_exposer.def( 
                "print_to_stream"
                , print_to_stream_function_type(&::moltk::BaseBiosequence::print_to_stream)
                , default_print_to_stream_function_type(&Biosequence_wrapper::default_print_to_stream)
                , ( bp::arg("os") ) );
        
        }
    }

}
