// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.h"
#include "structure.pypp.hpp"

namespace bp = boost::python;

struct Structure_wrapper : moltk::Structure, bp::wrapper< moltk::Structure > {

    struct Residue_wrapper : moltk::Structure::Residue, bp::wrapper< moltk::Structure::Residue > {
    
        Residue_wrapper( )
        : moltk::Structure::Residue( )
          , bp::wrapper< moltk::Structure::Residue >(){
            // null constructor
        
        }
    
        Residue_wrapper(::moltk::Structure::Residue const & rhs )
        : moltk::Structure::Residue( boost::ref(rhs) )
          , bp::wrapper< moltk::Structure::Residue >(){
            // copy constructor
        
        }
    
        virtual char getOneLetterCode(  ) const  {
            if( bp::override func_getOneLetterCode = this->get_override( "getOneLetterCode" ) )
                return func_getOneLetterCode(  );
            else{
                return this->moltk::Structure::Residue::getOneLetterCode(  );
            }
        }
        
        char default_getOneLetterCode(  ) const  {
            return moltk::Structure::Residue::getOneLetterCode( );
        }
    
        virtual int getResidueNumber(  ) const  {
            if( bp::override func_getResidueNumber = this->get_override( "getResidueNumber" ) )
                return func_getResidueNumber(  );
            else{
                return this->moltk::Structure::Residue::getResidueNumber(  );
            }
        }
        
        int default_getResidueNumber(  ) const  {
            return moltk::Structure::Residue::getResidueNumber( );
        }
    
    };

    Structure_wrapper( )
    : moltk::Structure( )
      , bp::wrapper< moltk::Structure >(){
        // null constructor
    
    }

    Structure_wrapper(::std::istream & arg0 )
    : moltk::Structure( boost::ref(arg0) )
      , bp::wrapper< moltk::Structure >(){
        // constructor
    
    }

    Structure_wrapper(::std::string const & fileName )
    : moltk::Structure( fileName )
      , bp::wrapper< moltk::Structure >(){
        // constructor
    
    }

    Structure_wrapper(::moltk::Structure const & rhs )
    : moltk::Structure( boost::ref(rhs) )
      , bp::wrapper< moltk::Structure >(){
        // copy constructor
    
    }

    virtual ::size_t getNumberOfResidues(  ) const  {
        if( bp::override func_getNumberOfResidues = this->get_override( "getNumberOfResidues" ) )
            return func_getNumberOfResidues(  );
        else{
            return this->moltk::Structure::getNumberOfResidues(  );
        }
    }
    
    ::size_t default_getNumberOfResidues(  ) const  {
        return moltk::Structure::getNumberOfResidues( );
    }

    virtual void print_to_stream( ::std::ostream & os ) const  {
        if( bp::override func_print_to_stream = this->get_override( "print_to_stream" ) )
            func_print_to_stream( boost::ref(os) );
        else{
            this->moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
        }
    }
    
    void default_print_to_stream( ::std::ostream & os ) const  {
        moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
    }

};

void register_Structure_class(){

    { //::moltk::Structure
        typedef bp::class_< Structure_wrapper, bp::bases< moltk::BaseBiosequence > > Structure_exposer_t;
        Structure_exposer_t Structure_exposer = Structure_exposer_t( "Structure", bp::init< >() );
        bp::scope Structure_scope( Structure_exposer );
        { //::moltk::Structure::Atom
            typedef bp::class_< moltk::Structure::Atom > Atom_exposer_t;
            Atom_exposer_t Atom_exposer = Atom_exposer_t( "Atom", "\n Structure::Atom represents a chemical atom in a molecular structure.\n" );
            bp::scope Atom_scope( Atom_exposer );
            bp::enum_< moltk::Structure::Atom::RecordType>("RecordType")
                .value("ATOM_RECORD_TYPE", moltk::Structure::Atom::ATOM_RECORD_TYPE)
                .value("HETATM_RECORD_TYPE", moltk::Structure::Atom::HETATM_RECORD_TYPE)
                .export_values()
                ;
            { //::moltk::Structure::Atom::foo
            
                typedef int ( ::moltk::Structure::Atom::*foo_function_type )(  ) const;
                
                Atom_exposer.def( 
                    "foo"
                    , foo_function_type( &::moltk::Structure::Atom::foo )
                    , "\n Test function to test python bindings.\n" );
            
            }
            { //::moltk::Structure::Atom::getRecordType
            
                typedef ::moltk::Structure::Atom::RecordType ( ::moltk::Structure::Atom::*getRecordType_function_type )(  ) const;
                
                Atom_exposer.def( 
                    "getRecordType"
                    , getRecordType_function_type( &::moltk::Structure::Atom::getRecordType )
                    , "\n Whether this is a standard macromolecule atom type (ATOM) or other (HETATM).\n" );
            
            }
        }
        bp::class_< Structure_wrapper::Residue_wrapper, bp::bases< moltk::BaseBiosequence::BaseResidue > >( "Residue", bp::init< >() )    
            .def( bp::init< moltk::Structure::Residue const & >(( bp::arg("rhs") )) )    
            .def( 
                "getOneLetterCode"
                , (char ( ::moltk::Structure::Residue::* )(  ) const)(&::moltk::Structure::Residue::getOneLetterCode)
                , (char ( Structure_wrapper::Residue_wrapper::* )(  ) const)(&Structure_wrapper::Residue_wrapper::default_getOneLetterCode) )    
            .def( 
                "getResidueNumber"
                , (int ( ::moltk::Structure::Residue::* )(  ) const)(&::moltk::Structure::Residue::getResidueNumber)
                , (int ( Structure_wrapper::Residue_wrapper::* )(  ) const)(&Structure_wrapper::Residue_wrapper::default_getResidueNumber) );
        Structure_exposer.def( bp::init< std::istream & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< std::istream &, moltk::Structure >();
        Structure_exposer.def( bp::init< std::string const & >(( bp::arg("fileName") )) );
        bp::implicitly_convertible< std::string const &, moltk::Structure >();
        Structure_exposer.def( bp::init< moltk::Structure const & >(( bp::arg("rhs") )) );
        { //::moltk::Structure::getNumberOfResidues
        
            typedef ::size_t ( ::moltk::Structure::*getNumberOfResidues_function_type )(  ) const;
            typedef ::size_t ( Structure_wrapper::*default_getNumberOfResidues_function_type )(  ) const;
            
            Structure_exposer.def( 
                "getNumberOfResidues"
                , getNumberOfResidues_function_type(&::moltk::Structure::getNumberOfResidues)
                , default_getNumberOfResidues_function_type(&Structure_wrapper::default_getNumberOfResidues) );
        
        }
        { //::moltk::Structure::getResidue
        
            typedef ::moltk::BaseBiosequence::BaseResidue const & ( ::moltk::Structure::*getResidue_function_type )( ::size_t ) const;
            
            Structure_exposer.def( 
                "getResidue"
                , getResidue_function_type(&::moltk::Structure::getResidue)
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::Structure::loadFile
        
            typedef bool ( ::moltk::Structure::*loadFile_function_type )( ::std::string const & ) ;
            
            Structure_exposer.def( 
                "loadFile"
                , loadFile_function_type( &::moltk::Structure::loadFile )
                , ( bp::arg("fileName") ) );
        
        }
        { //::moltk::Structure::loadStream
        
            typedef bool ( ::moltk::Structure::*loadStream_function_type )( ::std::istream & ) ;
            
            Structure_exposer.def( 
                "loadStream"
                , loadStream_function_type( &::moltk::Structure::loadStream )
                , ( bp::arg("arg0") ) );
        
        }
        { //::moltk::BaseBiosequence::print_to_stream
        
            typedef void ( ::moltk::BaseBiosequence::*print_to_stream_function_type )( ::std::ostream & ) const;
            typedef void ( Structure_wrapper::*default_print_to_stream_function_type )( ::std::ostream & ) const;
            
            Structure_exposer.def( 
                "print_to_stream"
                , print_to_stream_function_type(&::moltk::BaseBiosequence::print_to_stream)
                , default_print_to_stream_function_type(&Structure_wrapper::default_print_to_stream)
                , ( bp::arg("os") ) );
        
        }
    }

}
