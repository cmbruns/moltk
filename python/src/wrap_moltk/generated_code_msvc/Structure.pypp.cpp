// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.h"
#include "structure.pypp.hpp"

namespace bp = boost::python;

void register_Structure_class(){

    { //::moltk::Structure
        typedef bp::class_< moltk::Structure > Structure_exposer_t;
        Structure_exposer_t Structure_exposer = Structure_exposer_t( "Structure", bp::init< >() );
        bp::scope Structure_scope( Structure_exposer );
        { //::moltk::Structure::Atom
            typedef bp::class_< moltk::Structure::Atom > Atom_exposer_t;
            Atom_exposer_t Atom_exposer = Atom_exposer_t( "Atom", "\n Structure::Atom represents a chemical atom in a molecular structure.\n" );
            bp::scope Atom_scope( Atom_exposer );
            bp::enum_< moltk::Structure::Atom::RecordType>("RecordType")
                .value("ATOM_RECORD_TYPE", moltk::Structure::Atom::ATOM_RECORD_TYPE)
                .value("HETATM_RECORD_TYPE", moltk::Structure::Atom::HETATM_RECORD_TYPE)
                .export_values()
                ;
            { //::moltk::Structure::Atom::foo
            
                typedef int ( ::moltk::Structure::Atom::*foo_function_type )(  ) const;
                
                Atom_exposer.def( 
                    "foo"
                    , foo_function_type( &::moltk::Structure::Atom::foo )
                    , "\n Test function to test python bindings.\n" );
            
            }
            { //::moltk::Structure::Atom::getRecordType
            
                typedef ::moltk::Structure::Atom::RecordType ( ::moltk::Structure::Atom::*getRecordType_function_type )(  ) const;
                
                Atom_exposer.def( 
                    "getRecordType"
                    , getRecordType_function_type( &::moltk::Structure::Atom::getRecordType )
                    , "\n Whether this is a standard macromolecule atom type (ATOM) or other (HETATM).\n" );
            
            }
        }
        Structure_exposer.def( bp::init< std::istream & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< std::istream &, moltk::Structure >();
        Structure_exposer.def( bp::init< std::string const & >(( bp::arg("fileName") )) );
        bp::implicitly_convertible< std::string const &, moltk::Structure >();
        { //::moltk::Structure::loadFile
        
            typedef bool ( ::moltk::Structure::*loadFile_function_type )( ::std::string const & ) ;
            
            Structure_exposer.def( 
                "loadFile"
                , loadFile_function_type( &::moltk::Structure::loadFile )
                , ( bp::arg("fileName") ) );
        
        }
        { //::moltk::Structure::loadStream
        
            typedef bool ( ::moltk::Structure::*loadStream_function_type )( ::std::istream & ) ;
            
            Structure_exposer.def( 
                "loadStream"
                , loadStream_function_type( &::moltk::Structure::loadStream )
                , ( bp::arg("arg0") ) );
        
        }
    }

}
