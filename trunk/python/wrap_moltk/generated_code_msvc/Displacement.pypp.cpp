// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.hpp"
#include "displacement.pypp.hpp"

namespace bp = boost::python;

void register_Displacement_class(){

    { //::moltk::Vector3D_< moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > >
        typedef bp::class_< moltk::Vector3D_< moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > > > Displacement_exposer_t;
        Displacement_exposer_t Displacement_exposer = Displacement_exposer_t( "Displacement", "\n Vector3D_<> is an arbitrary point or vector in 3-space.\n\n Vector3D_<> can contain Quantities with Units.\n", bp::init< >() );
        bp::scope Displacement_scope( Displacement_exposer );
        Displacement_exposer.def( bp::init< moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > const &, moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > const &, moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > const & >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) );
        Displacement_exposer.def( bp::init< moltk::BaseVector3D< moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > > const & >(( bp::arg("rhs") )) );
        bp::implicitly_convertible< moltk::BaseVector3D< moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > > const &, moltk::Vector3D_< moltk::units::Quantity< moltk::units::Unit< moltk::units::Dimension< 0, 1, 0, 0, 0, 0, 0 > >, double > > >();
    }

}
