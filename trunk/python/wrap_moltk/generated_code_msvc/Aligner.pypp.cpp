// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.hpp"
#include "aligner.pypp.hpp"

namespace bp = boost::python;

void register_Aligner_class(){

    { //::moltk::Aligner
        typedef bp::class_< moltk::Aligner > Aligner_exposer_t;
        Aligner_exposer_t Aligner_exposer = Aligner_exposer_t( "Aligner", "\n The Aligner class creates macromolecule sequence alignments and structure alignments.\n", bp::init< >("\n Construct an Aligner with default parameters and no Alignments yet\n") );
        bp::scope Aligner_scope( Aligner_exposer );
        { //::moltk::Aligner::align
        
            typedef ::moltk::Alignment ( ::moltk::Aligner::*align_function_type )( ::moltk::Alignment const &,::moltk::Alignment const & ) ;
            
            Aligner_exposer.def( 
                "align"
                , align_function_type( &::moltk::Aligner::align )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::moltk::Aligner::get_scorer
        
            typedef ::moltk::MatrixScorer const & ( ::moltk::Aligner::*get_scorer_function_type )(  ) const;
            
            Aligner_exposer.def( 
                "get_scorer"
                , get_scorer_function_type( &::moltk::Aligner::get_scorer )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n scorer computes alignment scores.\n" );
        
        }
        { //::moltk::Aligner::get_scorer
        
            typedef ::moltk::MatrixScorer & ( ::moltk::Aligner::*get_scorer_function_type )(  ) ;
            
            Aligner_exposer.def( 
                "get_scorer"
                , get_scorer_function_type( &::moltk::Aligner::get_scorer )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n MatrixScorer object this Aligner uses to score alignments.\n" );
        
        }
        { //::moltk::Aligner::get_shared_aligner
        
            typedef ::moltk::Aligner & ( *get_shared_aligner_function_type )(  );
            
            Aligner_exposer.def( 
                "get_shared_aligner"
                , get_shared_aligner_function_type( &::moltk::Aligner::get_shared_aligner )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n Global shared aligner object used by align() method.\n" );
        
        }
        { //::moltk::Aligner::set_scorer
        
            typedef ::moltk::Aligner & ( ::moltk::Aligner::*set_scorer_function_type )( ::moltk::MatrixScorer const & ) ;
            
            Aligner_exposer.def( 
                "set_scorer"
                , set_scorer_function_type( &::moltk::Aligner::set_scorer )
                , ( bp::arg("scorer") )
                , bp::return_self< bp::with_custodian_and_ward< 1, 2 > >() );
        
        }
        Aligner_exposer.def_readwrite( "test_table", &moltk::Aligner::test_table, "\n The actual dynamic programming table\n" );
        Aligner_exposer.staticmethod( "get_shared_aligner" );
        { //property "shared_aligner"[fget=::moltk::Aligner::get_shared_aligner]
        
            typedef ::moltk::Aligner & ( *fget )(  );
            
            Aligner_exposer.add_static_property( 
                "shared_aligner"
                , bp::make_function( 
                      fget( &::moltk::Aligner::get_shared_aligner )
                    , bp::return_value_policy< bp::reference_existing_object >() ) 
                , "global Aligner object used by moltk.align() command" );
        
        }
        { //property "scorer"[fget=::moltk::Aligner::get_scorer, fset=::moltk::Aligner::set_scorer]
        
            typedef ::moltk::MatrixScorer const & ( ::moltk::Aligner::*fget )(  ) const;
            typedef ::moltk::Aligner & ( ::moltk::Aligner::*fset )( ::moltk::MatrixScorer const & ) ;
            
            Aligner_exposer.add_property( 
                "scorer"
                , bp::make_function( 
                      fget( &::moltk::Aligner::get_scorer )
                    , bp::return_value_policy< bp::reference_existing_object >() ) 
                , bp::make_function( 
                      fset( &::moltk::Aligner::set_scorer )
                    , bp::return_self< bp::with_custodian_and_ward< 1, 2 > >() )  );
        
        }
    }

}
