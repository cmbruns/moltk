from pyplusplus import module_builder
from pyplusplus.module_builder.call_policies import *
from doxygen_doc_extractor import doxygen_doc_extractor
from pygccxml import declarations

def wrap_moltk():
    mb = module_builder.module_builder_t(
        files = ["@MOLTK_WRAP_INCLUDE_FILES@",]
        , gccxml_path = "@GCCXML_EXECUTABLE@"
        , include_paths = ["@MOLTK_INCLUDE_DIR@"
                         , "@Boost_INCLUDE_DIRS@"]
        , indexing_suite_version = 2
        , define_symbols = ["_HAS_TR1=0"])

    # To force indexing_suite?
    vec_int = mb.class_('vector<int>')
    vec_int.include();
    ns_moltk = mb.namespace('moltk')
    ns_moltk.include()
    # Avoid exposing non-public members
    for fn in mb.member_functions(lambda f: f.access_type != declarations.ACCESS_TYPES.PUBLIC):
        fn.exclude()
    for fn in mb.constructors(lambda f: f.access_type != declarations.ACCESS_TYPES.PUBLIC):
        fn.exclude()
    aligner = ns_moltk.class_('Aligner')
    for cls_name in ['QueryPosition', 'TargetPosition']:
        aligner.class_(cls_name).member_function('clone').call_policies = \
            return_value_policy(manage_new_object)
    aligner.add_property('endGapsFree', 
         fget=aligner.member_functions('getEndGapsFree')[1],
         fset=aligner.member_functions('setEndGapsFree')[1])
    alignment = ns_moltk.class_('Alignment')
    for fn_name in ['appendSequence', 'setScore']:
         alignment.member_function(fn_name).call_policies = return_self()
    estring = alignment.class_('EString')
    estring.member_function('appendRun').call_policies = return_self()

    extractor = doxygen_doc_extractor()
    mb.build_code_creator(module_name = '_moltk', doc_extractor = extractor)
    mb.split_module('@GENERATED_CODE_DIR@')

wrap_moltk()
