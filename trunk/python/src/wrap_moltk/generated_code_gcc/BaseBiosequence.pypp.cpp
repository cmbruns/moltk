// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.h"
#include "BaseBiosequence.pypp.hpp"

namespace bp = boost::python;

struct BaseBiosequence_wrapper : moltk::BaseBiosequence, bp::wrapper< moltk::BaseBiosequence > {

    struct BaseResidue_wrapper : moltk::BaseBiosequence::BaseResidue, bp::wrapper< moltk::BaseBiosequence::BaseResidue > {
    
        BaseResidue_wrapper( )
        : moltk::BaseBiosequence::BaseResidue( )
          , bp::wrapper< moltk::BaseBiosequence::BaseResidue >(){
            // null constructor
        
        }
    
        virtual char getOneLetterCode(  ) const {
            bp::override func_getOneLetterCode = this->get_override( "getOneLetterCode" );
            return func_getOneLetterCode(  );
        }
    
        virtual int getResidueNumber(  ) const {
            bp::override func_getResidueNumber = this->get_override( "getResidueNumber" );
            return func_getResidueNumber(  );
        }
    
    };

    struct GapResidue_wrapper : moltk::BaseBiosequence::GapResidue, bp::wrapper< moltk::BaseBiosequence::GapResidue > {
    
        GapResidue_wrapper(int residueNumberParam )
        : moltk::BaseBiosequence::GapResidue( residueNumberParam )
          , bp::wrapper< moltk::BaseBiosequence::GapResidue >(){
            // constructor
        
        }
    
        virtual char getOneLetterCode(  ) const  {
            if( bp::override func_getOneLetterCode = this->get_override( "getOneLetterCode" ) )
                return func_getOneLetterCode(  );
            else{
                return this->moltk::BaseBiosequence::GapResidue::getOneLetterCode(  );
            }
        }
        
        char default_getOneLetterCode(  ) const  {
            return moltk::BaseBiosequence::GapResidue::getOneLetterCode( );
        }
    
        virtual int getResidueNumber(  ) const  {
            if( bp::override func_getResidueNumber = this->get_override( "getResidueNumber" ) )
                return func_getResidueNumber(  );
            else{
                return this->moltk::BaseBiosequence::GapResidue::getResidueNumber(  );
            }
        }
        
        int default_getResidueNumber(  ) const  {
            return moltk::BaseBiosequence::GapResidue::getResidueNumber( );
        }
    
    };

    BaseBiosequence_wrapper( )
    : moltk::BaseBiosequence( )
      , bp::wrapper< moltk::BaseBiosequence >(){
        // null constructor
    
    }

    virtual ::size_t getNumberOfResidues(  ) const {
        bp::override func_getNumberOfResidues = this->get_override( "getNumberOfResidues" );
        return func_getNumberOfResidues(  );
    }

    virtual ::moltk::BaseBiosequence::BaseResidue const & getResidue( ::size_t index ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void print_to_stream( ::std::ostream & os ) const  {
        if( bp::override func_print_to_stream = this->get_override( "print_to_stream" ) )
            func_print_to_stream( boost::ref(os) );
        else{
            this->moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
        }
    }
    
    void default_print_to_stream( ::std::ostream & os ) const  {
        moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
    }

};

void register_BaseBiosequence_class(){

    { //::moltk::BaseBiosequence
        typedef bp::class_< BaseBiosequence_wrapper, boost::noncopyable > BaseBiosequence_exposer_t;
        BaseBiosequence_exposer_t BaseBiosequence_exposer = BaseBiosequence_exposer_t( "BaseBiosequence", bp::init< >() );
        bp::scope BaseBiosequence_scope( BaseBiosequence_exposer );
        bp::class_< BaseBiosequence_wrapper::BaseResidue_wrapper, boost::noncopyable >( "BaseResidue", bp::init< >() )    
            .def( 
                "getOneLetterCode"
                , bp::pure_virtual( (char ( ::moltk::BaseBiosequence::BaseResidue::* )(  ) const)(&::moltk::BaseBiosequence::BaseResidue::getOneLetterCode) ) )    
            .def( 
                "getResidueNumber"
                , bp::pure_virtual( (int ( ::moltk::BaseBiosequence::BaseResidue::* )(  ) const)(&::moltk::BaseBiosequence::BaseResidue::getResidueNumber) ) )    
            .def( "__int__", &moltk::BaseBiosequence::BaseResidue::operator char  );
        { //::moltk::BaseBiosequence::GapResidue
            typedef bp::class_< BaseBiosequence_wrapper::GapResidue_wrapper, bp::bases< moltk::BaseBiosequence::BaseResidue >, boost::noncopyable > GapResidue_exposer_t;
            GapResidue_exposer_t GapResidue_exposer = GapResidue_exposer_t( "GapResidue", "\n GapResidue is used in Alignments\n", bp::init< int >(( bp::arg("residueNumberParam") ), "\n GapResidue has the residue number of the preceding non-gap residue.\n\n Thus a left end-gap might have a residue number of zero.\n") );
            bp::scope GapResidue_scope( GapResidue_exposer );
            bp::implicitly_convertible< int, moltk::BaseBiosequence::GapResidue >();
            { //::moltk::BaseBiosequence::GapResidue::getOneLetterCode
            
                typedef char ( ::moltk::BaseBiosequence::GapResidue::*getOneLetterCode_function_type )(  ) const;
                typedef char ( BaseBiosequence_wrapper::GapResidue_wrapper::*default_getOneLetterCode_function_type )(  ) const;
                
                GapResidue_exposer.def( 
                    "getOneLetterCode"
                    , getOneLetterCode_function_type(&::moltk::BaseBiosequence::GapResidue::getOneLetterCode)
                    , default_getOneLetterCode_function_type(&BaseBiosequence_wrapper::GapResidue_wrapper::default_getOneLetterCode) );
            
            }
            { //::moltk::BaseBiosequence::GapResidue::getResidueNumber
            
                typedef int ( ::moltk::BaseBiosequence::GapResidue::*getResidueNumber_function_type )(  ) const;
                typedef int ( BaseBiosequence_wrapper::GapResidue_wrapper::*default_getResidueNumber_function_type )(  ) const;
                
                GapResidue_exposer.def( 
                    "getResidueNumber"
                    , getResidueNumber_function_type(&::moltk::BaseBiosequence::GapResidue::getResidueNumber)
                    , default_getResidueNumber_function_type(&BaseBiosequence_wrapper::GapResidue_wrapper::default_getResidueNumber) );
            
            }
        }
        { //::moltk::BaseBiosequence::getNumberOfResidues
        
            typedef ::size_t ( ::moltk::BaseBiosequence::*getNumberOfResidues_function_type )(  ) const;
            
            BaseBiosequence_exposer.def( 
                "getNumberOfResidues"
                , bp::pure_virtual( getNumberOfResidues_function_type(&::moltk::BaseBiosequence::getNumberOfResidues) ) );
        
        }
        { //::moltk::BaseBiosequence::getResidue
        
            typedef ::moltk::BaseBiosequence::BaseResidue const & ( ::moltk::BaseBiosequence::*getResidue_function_type )( ::size_t ) const;
            
            BaseBiosequence_exposer.def( 
                "getResidue"
                , bp::pure_virtual( getResidue_function_type(&::moltk::BaseBiosequence::getResidue) )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::BaseBiosequence::print_to_stream
        
            typedef void ( ::moltk::BaseBiosequence::*print_to_stream_function_type )( ::std::ostream & ) const;
            typedef void ( BaseBiosequence_wrapper::*default_print_to_stream_function_type )( ::std::ostream & ) const;
            
            BaseBiosequence_exposer.def( 
                "print_to_stream"
                , print_to_stream_function_type(&::moltk::BaseBiosequence::print_to_stream)
                , default_print_to_stream_function_type(&BaseBiosequence_wrapper::default_print_to_stream)
                , ( bp::arg("os") ) );
        
        }
    }

}
