// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.h"
#include "PdbStructure.pypp.hpp"

namespace bp = boost::python;

struct PdbStructure_wrapper : moltk::PdbStructure, bp::wrapper< moltk::PdbStructure > {

    struct Chain_wrapper : moltk::PdbStructure::Chain, bp::wrapper< moltk::PdbStructure::Chain > {
    
        Chain_wrapper( )
        : moltk::PdbStructure::Chain( )
          , bp::wrapper< moltk::PdbStructure::Chain >(){
            // null constructor
        
        }
    
        Chain_wrapper(::moltk::PdbStructure::Chain const & rhs )
        : moltk::PdbStructure::Chain( boost::ref(rhs) )
          , bp::wrapper< moltk::PdbStructure::Chain >(){
            // copy constructor
        
        }
    
        virtual ::size_t getNumberOfResidues(  ) const  {
            if( bp::override func_getNumberOfResidues = this->get_override( "getNumberOfResidues" ) )
                return func_getNumberOfResidues(  );
            else{
                return this->moltk::PdbStructure::Chain::getNumberOfResidues(  );
            }
        }
        
        ::size_t default_getNumberOfResidues(  ) const  {
            return moltk::PdbStructure::Chain::getNumberOfResidues( );
        }
    
        virtual void print_to_stream( ::std::ostream & os ) const  {
            if( bp::override func_print_to_stream = this->get_override( "print_to_stream" ) )
                func_print_to_stream( boost::ref(os) );
            else{
                this->moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
            }
        }
        
        void default_print_to_stream( ::std::ostream & os ) const  {
            moltk::BaseBiosequence::print_to_stream( boost::ref(os) );
        }
    
    };

    struct Residue_wrapper : moltk::PdbStructure::Residue, bp::wrapper< moltk::PdbStructure::Residue > {
    
        Residue_wrapper( )
        : moltk::PdbStructure::Residue( )
          , bp::wrapper< moltk::PdbStructure::Residue >(){
            // null constructor
        
        }
    
        Residue_wrapper(::moltk::PdbStructure::Residue const & rhs )
        : moltk::PdbStructure::Residue( boost::ref(rhs) )
          , bp::wrapper< moltk::PdbStructure::Residue >(){
            // copy constructor
        
        }
    
        virtual char getOneLetterCode(  ) const  {
            if( bp::override func_getOneLetterCode = this->get_override( "getOneLetterCode" ) )
                return func_getOneLetterCode(  );
            else{
                return this->moltk::PdbStructure::Residue::getOneLetterCode(  );
            }
        }
        
        char default_getOneLetterCode(  ) const  {
            return moltk::PdbStructure::Residue::getOneLetterCode( );
        }
    
        virtual int getResidueNumber(  ) const  {
            if( bp::override func_getResidueNumber = this->get_override( "getResidueNumber" ) )
                return func_getResidueNumber(  );
            else{
                return this->moltk::PdbStructure::Residue::getResidueNumber(  );
            }
        }
        
        int default_getResidueNumber(  ) const  {
            return moltk::PdbStructure::Residue::getResidueNumber( );
        }
    
    };

    PdbStructure_wrapper( )
    : moltk::PdbStructure( )
      , bp::wrapper< moltk::PdbStructure >(){
        // null constructor
    
    }

    PdbStructure_wrapper(::std::istream & arg0 )
    : moltk::PdbStructure( boost::ref(arg0) )
      , bp::wrapper< moltk::PdbStructure >(){
        // constructor
    
    }

    PdbStructure_wrapper(::std::string const & fileName )
    : moltk::PdbStructure( fileName )
      , bp::wrapper< moltk::PdbStructure >(){
        // constructor
    
    }

    PdbStructure_wrapper(::moltk::PdbStructure const & rhs )
    : moltk::PdbStructure( boost::ref(rhs) )
      , bp::wrapper< moltk::PdbStructure >(){
        // copy constructor
    
    }

};

void register_PdbStructure_class(){

    { //::moltk::PdbStructure
        typedef bp::class_< PdbStructure_wrapper > PdbStructure_exposer_t;
        PdbStructure_exposer_t PdbStructure_exposer = PdbStructure_exposer_t( "PdbStructure", bp::init< >() );
        bp::scope PdbStructure_scope( PdbStructure_exposer );
        { //::moltk::PdbStructure::Atom
            typedef bp::class_< moltk::PdbStructure::Atom > Atom_exposer_t;
            Atom_exposer_t Atom_exposer = Atom_exposer_t( "Atom", "\n Structure::Atom represents a chemical atom in a molecular structure.\n" );
            bp::scope Atom_scope( Atom_exposer );
            bp::enum_< moltk::PdbStructure::Atom::RecordType>("RecordType")
                .value("ATOM_RECORD_TYPE", moltk::PdbStructure::Atom::ATOM_RECORD_TYPE)
                .value("HETATM_RECORD_TYPE", moltk::PdbStructure::Atom::HETATM_RECORD_TYPE)
                .export_values()
                ;
            { //::moltk::PdbStructure::Atom::getRecordType
            
                typedef ::moltk::PdbStructure::Atom::RecordType ( ::moltk::PdbStructure::Atom::*getRecordType_function_type )(  ) const;
                
                Atom_exposer.def( 
                    "getRecordType"
                    , getRecordType_function_type( &::moltk::PdbStructure::Atom::getRecordType )
                    , "\n Whether this is a standard macromolecule atom type (ATOM) or other (HETATM).\n" );
            
            }
        }
        bp::class_< PdbStructure_wrapper::Chain_wrapper, bp::bases< moltk::BaseBiosequence > >( "Chain", bp::init< >() )    
            .def( bp::init< moltk::PdbStructure::Chain const & >(( bp::arg("rhs") )) )    
            .def( 
                "getNumberOfResidues"
                , (::size_t ( ::moltk::PdbStructure::Chain::* )(  ) const)(&::moltk::PdbStructure::Chain::getNumberOfResidues)
                , (::size_t ( PdbStructure_wrapper::Chain_wrapper::* )(  ) const)(&PdbStructure_wrapper::Chain_wrapper::default_getNumberOfResidues) )    
            .def( 
                "getResidue"
                , (::moltk::BaseBiosequence::BaseResidue const & ( ::moltk::PdbStructure::Chain::* )( ::size_t ) const)(&::moltk::PdbStructure::Chain::getResidue)
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "print_to_stream"
                , (void ( ::moltk::BaseBiosequence::* )( ::std::ostream & ) const)(&::moltk::BaseBiosequence::print_to_stream)
                , (void ( PdbStructure_wrapper::Chain_wrapper::* )( ::std::ostream & ) const)(&PdbStructure_wrapper::Chain_wrapper::default_print_to_stream)
                , ( bp::arg("os") ) );
        bp::class_< PdbStructure_wrapper::Residue_wrapper, bp::bases< moltk::BaseBiosequence::BaseResidue > >( "Residue", bp::init< >() )    
            .def( bp::init< moltk::PdbStructure::Residue const & >(( bp::arg("rhs") )) )    
            .def( 
                "getOneLetterCode"
                , (char ( ::moltk::PdbStructure::Residue::* )(  ) const)(&::moltk::PdbStructure::Residue::getOneLetterCode)
                , (char ( PdbStructure_wrapper::Residue_wrapper::* )(  ) const)(&PdbStructure_wrapper::Residue_wrapper::default_getOneLetterCode) )    
            .def( 
                "getResidueNumber"
                , (int ( ::moltk::PdbStructure::Residue::* )(  ) const)(&::moltk::PdbStructure::Residue::getResidueNumber)
                , (int ( PdbStructure_wrapper::Residue_wrapper::* )(  ) const)(&PdbStructure_wrapper::Residue_wrapper::default_getResidueNumber) );
        PdbStructure_exposer.def( bp::init< std::istream & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< std::istream &, moltk::PdbStructure >();
        PdbStructure_exposer.def( bp::init< std::string const & >(( bp::arg("fileName") )) );
        bp::implicitly_convertible< std::string const &, moltk::PdbStructure >();
        PdbStructure_exposer.def( bp::init< moltk::PdbStructure const & >(( bp::arg("rhs") )) );
        { //::moltk::PdbStructure::loadFile
        
            typedef bool ( ::moltk::PdbStructure::*loadFile_function_type )( ::std::string const & ) ;
            
            PdbStructure_exposer.def( 
                "loadFile"
                , loadFile_function_type( &::moltk::PdbStructure::loadFile )
                , ( bp::arg("fileName") ) );
        
        }
        { //::moltk::PdbStructure::loadStream
        
            typedef bool ( ::moltk::PdbStructure::*loadStream_function_type )( ::std::istream & ) ;
            
            PdbStructure_exposer.def( 
                "loadStream"
                , loadStream_function_type( &::moltk::PdbStructure::loadStream )
                , ( bp::arg("arg0") ) );
        
        }
    }

}
