// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_moltk.h"
#include "Alignment.pypp.hpp"

namespace bp = boost::python;

void register_Alignment_class(){

    { //::moltk::Alignment
        typedef bp::class_< moltk::Alignment > Alignment_exposer_t;
        Alignment_exposer_t Alignment_exposer = Alignment_exposer_t( "Alignment", bp::init< >() );
        bp::scope Alignment_scope( Alignment_exposer );
        bp::enum_< moltk::Alignment::List>("List")
            .value("SequenceList", moltk::Alignment::SequenceList)
            .value("StructureList", moltk::Alignment::StructureList)
            .export_values()
            ;
        { //::moltk::Alignment::EString
            typedef bp::class_< moltk::Alignment::EString > EString_exposer_t;
            EString_exposer_t EString_exposer = EString_exposer_t( "EString", bp::init< >() );
            bp::scope EString_scope( EString_exposer );
            bp::class_< moltk::Alignment::EString::const_iterator >( "const_iterator", bp::init< >() )    
                .def( bp::init< std::vector< int > const &, int, int >(( bp::arg("runs"), bp::arg("run_index"), bp::arg("position_index") )) )    
                .def( bp::self != bp::self )    
                .def( bp::self == bp::self );
            { //::moltk::Alignment::EString::append_run
            
                typedef ::moltk::Alignment::EString & ( ::moltk::Alignment::EString::*append_run_function_type )( int ) ;
                
                EString_exposer.def( 
                    "append_run"
                    , append_run_function_type( &::moltk::Alignment::EString::append_run )
                    , ( bp::arg("run") )
                    , bp::return_self< >() );
            
            }
            { //::moltk::Alignment::EString::begin
            
                typedef ::moltk::Alignment::EString::const_iterator ( ::moltk::Alignment::EString::*begin_function_type )(  ) const;
                
                EString_exposer.def( 
                    "begin"
                    , begin_function_type( &::moltk::Alignment::EString::begin ) );
            
            }
            { //::moltk::Alignment::EString::end
            
                typedef ::moltk::Alignment::EString::const_iterator ( ::moltk::Alignment::EString::*end_function_type )(  ) const;
                
                EString_exposer.def( 
                    "end"
                    , end_function_type( &::moltk::Alignment::EString::end ) );
            
            }
            EString_exposer.def( bp::self != bp::self );
            EString_exposer.def( bp::self * bp::self );
            EString_exposer.def( bp::self == bp::self );
            { //::moltk::Alignment::EString::reverse
            
                typedef void ( ::moltk::Alignment::EString::*reverse_function_type )(  ) ;
                
                EString_exposer.def( 
                    "reverse"
                    , reverse_function_type( &::moltk::Alignment::EString::reverse ) );
            
            }
            { //::moltk::Alignment::EString::total_length
            
                typedef ::size_t ( ::moltk::Alignment::EString::*total_length_function_type )(  ) const;
                
                EString_exposer.def( 
                    "total_length"
                    , total_length_function_type( &::moltk::Alignment::EString::total_length ) );
            
            }
            { //::moltk::Alignment::EString::ungapped_length
            
                typedef ::size_t ( ::moltk::Alignment::EString::*ungapped_length_function_type )(  ) const;
                
                EString_exposer.def( 
                    "ungapped_length"
                    , ungapped_length_function_type( &::moltk::Alignment::EString::ungapped_length ) );
            
            }
            EString_exposer.def( bp::self_ns::str( bp::self ) );
        }
        bp::class_< moltk::Alignment::Row >( "Row" )    
            .def_readwrite( "e_string", &moltk::Alignment::Row::e_string )    
            .def_readwrite( "list", &moltk::Alignment::Row::list )    
            .def_readwrite( "list_index", &moltk::Alignment::Row::list_index )    
            .def_readwrite( "sequence_weight", &moltk::Alignment::Row::sequence_weight );
        Alignment_exposer.def( bp::init< moltk::Biosequence const & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< moltk::Biosequence const &, moltk::Alignment >();
        Alignment_exposer.def( bp::init< std::string const & >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< std::string const &, moltk::Alignment >();
        Alignment_exposer.def( bp::init< char const * >(( bp::arg("arg0") )) );
        bp::implicitly_convertible< char const *, moltk::Alignment >();
        { //::moltk::Alignment::align
        
            typedef ::moltk::Alignment ( ::moltk::Alignment::*align_function_type )( ::moltk::Alignment const &,::moltk::Alignment::EString const &,::moltk::Alignment::EString const & ) const;
            
            Alignment_exposer.def( 
                "align"
                , align_function_type( &::moltk::Alignment::align )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::moltk::Alignment::append_sequence
        
            typedef ::moltk::Alignment & ( ::moltk::Alignment::*append_sequence_function_type )( ::moltk::Biosequence const & ) ;
            
            Alignment_exposer.def( 
                "append_sequence"
                , append_sequence_function_type( &::moltk::Alignment::append_sequence )
                , ( bp::arg("seq") )
                , bp::return_self< >() );
        
        }
        { //::moltk::Alignment::get_estring
        
            typedef ::moltk::Alignment::EString const & ( ::moltk::Alignment::*get_estring_function_type )( ::size_t ) const;
            
            Alignment_exposer.def( 
                "get_estring"
                , get_estring_function_type( &::moltk::Alignment::get_estring )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::Alignment::get_number_of_columns
        
            typedef ::size_t ( ::moltk::Alignment::*get_number_of_columns_function_type )(  ) const;
            
            Alignment_exposer.def( 
                "get_number_of_columns"
                , get_number_of_columns_function_type( &::moltk::Alignment::get_number_of_columns ) );
        
        }
        { //::moltk::Alignment::get_number_of_sequences
        
            typedef ::size_t ( ::moltk::Alignment::*get_number_of_sequences_function_type )(  ) const;
            
            Alignment_exposer.def( 
                "get_number_of_sequences"
                , get_number_of_sequences_function_type( &::moltk::Alignment::get_number_of_sequences ) );
        
        }
        { //::moltk::Alignment::get_sequence
        
            typedef ::moltk::BaseBiosequence const & ( ::moltk::Alignment::*get_sequence_function_type )( ::size_t ) const;
            
            Alignment_exposer.def( 
                "get_sequence"
                , get_sequence_function_type( &::moltk::Alignment::get_sequence )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::Alignment::load_string
        
            typedef void ( ::moltk::Alignment::*load_string_function_type )( ::std::string const & ) ;
            
            Alignment_exposer.def( 
                "load_string"
                , load_string_function_type( &::moltk::Alignment::load_string )
                , ( bp::arg("s") ) );
        
        }
        { //::moltk::Alignment::print_string
        
            typedef void ( ::moltk::Alignment::*print_string_function_type )( ::std::ostream & ) const;
            
            Alignment_exposer.def( 
                "print_string"
                , print_string_function_type( &::moltk::Alignment::print_string )
                , ( bp::arg("os") ) );
        
        }
        { //::moltk::Alignment::score
        
            typedef ::moltk::units::Information const & ( ::moltk::Alignment::*score_function_type )(  ) const;
            
            Alignment_exposer.def( 
                "score"
                , score_function_type( &::moltk::Alignment::score )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::moltk::Alignment::set_score
        
            typedef ::moltk::Alignment & ( ::moltk::Alignment::*set_score_function_type )( ::moltk::units::Information const & ) ;
            
            Alignment_exposer.def( 
                "set_score"
                , set_score_function_type( &::moltk::Alignment::set_score )
                , ( bp::arg("s") )
                , bp::return_self< >() );
        
        }
        Alignment_exposer.def( bp::self_ns::str( bp::self ) );
    }

}
